// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceServiceClient is the client API for ServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceServiceClient interface {
	// 审核
	ExamineText(ctx context.Context, in *ExamineTextPost, opts ...grpc.CallOption) (*ExamineTextResponse, error)
	ExamineImage(ctx context.Context, in *ExamineImagePost, opts ...grpc.CallOption) (*ResultResponse, error)
	// 翻译
	BaiduTranslate(ctx context.Context, in *BaiduTranslatePost, opts ...grpc.CallOption) (*BaiduTranslateResponse, error)
	// 地区
	CityList(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*CityListResponse, error)
}

type serviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceServiceClient(cc grpc.ClientConnInterface) ServiceServiceClient {
	return &serviceServiceClient{cc}
}

func (c *serviceServiceClient) ExamineText(ctx context.Context, in *ExamineTextPost, opts ...grpc.CallOption) (*ExamineTextResponse, error) {
	out := new(ExamineTextResponse)
	err := c.cc.Invoke(ctx, "/service.ServiceService/ExamineText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) ExamineImage(ctx context.Context, in *ExamineImagePost, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/service.ServiceService/ExamineImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) BaiduTranslate(ctx context.Context, in *BaiduTranslatePost, opts ...grpc.CallOption) (*BaiduTranslateResponse, error) {
	out := new(BaiduTranslateResponse)
	err := c.cc.Invoke(ctx, "/service.ServiceService/BaiduTranslate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServiceClient) CityList(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*CityListResponse, error) {
	out := new(CityListResponse)
	err := c.cc.Invoke(ctx, "/service.ServiceService/CityList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServiceServer is the server API for ServiceService service.
// All implementations must embed UnimplementedServiceServiceServer
// for forward compatibility
type ServiceServiceServer interface {
	// 审核
	ExamineText(context.Context, *ExamineTextPost) (*ExamineTextResponse, error)
	ExamineImage(context.Context, *ExamineImagePost) (*ResultResponse, error)
	// 翻译
	BaiduTranslate(context.Context, *BaiduTranslatePost) (*BaiduTranslateResponse, error)
	// 地区
	CityList(context.Context, *EmptyPost) (*CityListResponse, error)
	mustEmbedUnimplementedServiceServiceServer()
}

// UnimplementedServiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServiceServer struct {
}

func (UnimplementedServiceServiceServer) ExamineText(context.Context, *ExamineTextPost) (*ExamineTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExamineText not implemented")
}
func (UnimplementedServiceServiceServer) ExamineImage(context.Context, *ExamineImagePost) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExamineImage not implemented")
}
func (UnimplementedServiceServiceServer) BaiduTranslate(context.Context, *BaiduTranslatePost) (*BaiduTranslateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaiduTranslate not implemented")
}
func (UnimplementedServiceServiceServer) CityList(context.Context, *EmptyPost) (*CityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CityList not implemented")
}
func (UnimplementedServiceServiceServer) mustEmbedUnimplementedServiceServiceServer() {}

// UnsafeServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServiceServer will
// result in compilation errors.
type UnsafeServiceServiceServer interface {
	mustEmbedUnimplementedServiceServiceServer()
}

func RegisterServiceServiceServer(s grpc.ServiceRegistrar, srv ServiceServiceServer) {
	s.RegisterService(&ServiceService_ServiceDesc, srv)
}

func _ServiceService_ExamineText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExamineTextPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).ExamineText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceService/ExamineText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).ExamineText(ctx, req.(*ExamineTextPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_ExamineImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExamineImagePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).ExamineImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceService/ExamineImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).ExamineImage(ctx, req.(*ExamineImagePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_BaiduTranslate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaiduTranslatePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).BaiduTranslate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceService/BaiduTranslate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).BaiduTranslate(ctx, req.(*BaiduTranslatePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceService_CityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServiceServer).CityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceService/CityList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServiceServer).CityList(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceService_ServiceDesc is the grpc.ServiceDesc for ServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ServiceService",
	HandlerType: (*ServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExamineText",
			Handler:    _ServiceService_ExamineText_Handler,
		},
		{
			MethodName: "ExamineImage",
			Handler:    _ServiceService_ExamineImage_Handler,
		},
		{
			MethodName: "BaiduTranslate",
			Handler:    _ServiceService_BaiduTranslate_Handler,
		},
		{
			MethodName: "CityList",
			Handler:    _ServiceService_CityList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}
