// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fan/fan.proto

package fan

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Me 我的信息
type Me struct {
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	Nickname             string   `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	Avatar               string   `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar"`
	Club                 string   `protobuf:"bytes,4,opt,name=club,proto3" json:"club"`
	Authentication       bool     `protobuf:"varint,5,opt,name=authentication,proto3" json:"authentication"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Me) Reset()         { *m = Me{} }
func (m *Me) String() string { return proto.CompactTextString(m) }
func (*Me) ProtoMessage()    {}
func (*Me) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fb131bbf506eb07, []int{0}
}
func (m *Me) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Me.Unmarshal(m, b)
}
func (m *Me) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Me.Marshal(b, m, deterministic)
}
func (m *Me) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Me.Merge(m, src)
}
func (m *Me) XXX_Size() int {
	return xxx_messageInfo_Me.Size(m)
}
func (m *Me) XXX_DiscardUnknown() {
	xxx_messageInfo_Me.DiscardUnknown(m)
}

var xxx_messageInfo_Me proto.InternalMessageInfo

func (m *Me) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Me) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Me) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Me) GetClub() string {
	if m != nil {
		return m.Club
	}
	return ""
}

func (m *Me) GetAuthentication() bool {
	if m != nil {
		return m.Authentication
	}
	return false
}

// Fan 粉丝信息
type Fan struct {
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	Nickname             string   `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	Avatar               string   `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar"`
	Club                 string   `protobuf:"bytes,4,opt,name=club,proto3" json:"club"`
	Authentication       bool     `protobuf:"varint,5,opt,name=authentication,proto3" json:"authentication"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fan) Reset()         { *m = Fan{} }
func (m *Fan) String() string { return proto.CompactTextString(m) }
func (*Fan) ProtoMessage()    {}
func (*Fan) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fb131bbf506eb07, []int{1}
}
func (m *Fan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fan.Unmarshal(m, b)
}
func (m *Fan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fan.Marshal(b, m, deterministic)
}
func (m *Fan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fan.Merge(m, src)
}
func (m *Fan) XXX_Size() int {
	return xxx_messageInfo_Fan.Size(m)
}
func (m *Fan) XXX_DiscardUnknown() {
	xxx_messageInfo_Fan.DiscardUnknown(m)
}

var xxx_messageInfo_Fan proto.InternalMessageInfo

func (m *Fan) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Fan) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Fan) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Fan) GetClub() string {
	if m != nil {
		return m.Club
	}
	return ""
}

func (m *Fan) GetAuthentication() bool {
	if m != nil {
		return m.Authentication
	}
	return false
}

// NewFanPost 新用户
type NewFanPost struct {
	WeChatUserID         uint64   `protobuf:"varint,1,opt,name=WeChatUserID,proto3" json:"we_chat_user_id"`
	Account              string   `protobuf:"bytes,2,opt,name=Account,proto3" json:"account"`
	Avatar               string   `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"avatar"`
	Nickname             string   `protobuf:"bytes,4,opt,name=Nickname,proto3" json:"nickname"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewFanPost) Reset()         { *m = NewFanPost{} }
func (m *NewFanPost) String() string { return proto.CompactTextString(m) }
func (*NewFanPost) ProtoMessage()    {}
func (*NewFanPost) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fb131bbf506eb07, []int{2}
}
func (m *NewFanPost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewFanPost.Unmarshal(m, b)
}
func (m *NewFanPost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewFanPost.Marshal(b, m, deterministic)
}
func (m *NewFanPost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewFanPost.Merge(m, src)
}
func (m *NewFanPost) XXX_Size() int {
	return xxx_messageInfo_NewFanPost.Size(m)
}
func (m *NewFanPost) XXX_DiscardUnknown() {
	xxx_messageInfo_NewFanPost.DiscardUnknown(m)
}

var xxx_messageInfo_NewFanPost proto.InternalMessageInfo

func (m *NewFanPost) GetWeChatUserID() uint64 {
	if m != nil {
		return m.WeChatUserID
	}
	return 0
}

func (m *NewFanPost) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *NewFanPost) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *NewFanPost) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// ChangeFanNicknamePost 修改昵称
type ChangeFanNicknamePost struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"nickname"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeFanNicknamePost) Reset()         { *m = ChangeFanNicknamePost{} }
func (m *ChangeFanNicknamePost) String() string { return proto.CompactTextString(m) }
func (*ChangeFanNicknamePost) ProtoMessage()    {}
func (*ChangeFanNicknamePost) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fb131bbf506eb07, []int{3}
}
func (m *ChangeFanNicknamePost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeFanNicknamePost.Unmarshal(m, b)
}
func (m *ChangeFanNicknamePost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeFanNicknamePost.Marshal(b, m, deterministic)
}
func (m *ChangeFanNicknamePost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeFanNicknamePost.Merge(m, src)
}
func (m *ChangeFanNicknamePost) XXX_Size() int {
	return xxx_messageInfo_ChangeFanNicknamePost.Size(m)
}
func (m *ChangeFanNicknamePost) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeFanNicknamePost.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeFanNicknamePost proto.InternalMessageInfo

func (m *ChangeFanNicknamePost) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// ChangeFanAccountPost 修改账号
type ChangeFanAccountPost struct {
	Account              string   `protobuf:"bytes,2,opt,name=Account,proto3" json:"account"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeFanAccountPost) Reset()         { *m = ChangeFanAccountPost{} }
func (m *ChangeFanAccountPost) String() string { return proto.CompactTextString(m) }
func (*ChangeFanAccountPost) ProtoMessage()    {}
func (*ChangeFanAccountPost) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fb131bbf506eb07, []int{4}
}
func (m *ChangeFanAccountPost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeFanAccountPost.Unmarshal(m, b)
}
func (m *ChangeFanAccountPost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeFanAccountPost.Marshal(b, m, deterministic)
}
func (m *ChangeFanAccountPost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeFanAccountPost.Merge(m, src)
}
func (m *ChangeFanAccountPost) XXX_Size() int {
	return xxx_messageInfo_ChangeFanAccountPost.Size(m)
}
func (m *ChangeFanAccountPost) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeFanAccountPost.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeFanAccountPost proto.InternalMessageInfo

func (m *ChangeFanAccountPost) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type MeResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data                 *Me      `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeResponse) Reset()         { *m = MeResponse{} }
func (m *MeResponse) String() string { return proto.CompactTextString(m) }
func (*MeResponse) ProtoMessage()    {}
func (*MeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fb131bbf506eb07, []int{5}
}
func (m *MeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeResponse.Unmarshal(m, b)
}
func (m *MeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeResponse.Marshal(b, m, deterministic)
}
func (m *MeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeResponse.Merge(m, src)
}
func (m *MeResponse) XXX_Size() int {
	return xxx_messageInfo_MeResponse.Size(m)
}
func (m *MeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MeResponse proto.InternalMessageInfo

func (m *MeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MeResponse) GetData() *Me {
	if m != nil {
		return m.Data
	}
	return nil
}

// FanResponse 返回 粉丝信息
type FanResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	Data                 *Fan     `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FanResponse) Reset()         { *m = FanResponse{} }
func (m *FanResponse) String() string { return proto.CompactTextString(m) }
func (*FanResponse) ProtoMessage()    {}
func (*FanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fb131bbf506eb07, []int{6}
}
func (m *FanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FanResponse.Unmarshal(m, b)
}
func (m *FanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FanResponse.Marshal(b, m, deterministic)
}
func (m *FanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FanResponse.Merge(m, src)
}
func (m *FanResponse) XXX_Size() int {
	return xxx_messageInfo_FanResponse.Size(m)
}
func (m *FanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FanResponse proto.InternalMessageInfo

func (m *FanResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FanResponse) GetData() *Fan {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Me)(nil), "fan.Me")
	proto.RegisterType((*Fan)(nil), "fan.Fan")
	proto.RegisterType((*NewFanPost)(nil), "fan.NewFanPost")
	proto.RegisterType((*ChangeFanNicknamePost)(nil), "fan.ChangeFanNicknamePost")
	proto.RegisterType((*ChangeFanAccountPost)(nil), "fan.ChangeFanAccountPost")
	proto.RegisterType((*MeResponse)(nil), "fan.MeResponse")
	proto.RegisterType((*FanResponse)(nil), "fan.FanResponse")
}

func init() { proto.RegisterFile("fan/fan.proto", fileDescriptor_5fb131bbf506eb07) }

var fileDescriptor_5fb131bbf506eb07 = []byte{
	// 809 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xdd, 0x6e, 0x32, 0x45,
	0x18, 0x96, 0x96, 0x8f, 0x9f, 0x97, 0x9f, 0x7e, 0x4e, 0x5b, 0x83, 0xc4, 0x48, 0x43, 0x52, 0xed,
	0x89, 0xa0, 0x54, 0x53, 0xad, 0x31, 0x06, 0x50, 0x92, 0xb6, 0x52, 0x9b, 0xc5, 0xc6, 0xa4, 0x31,
	0x21, 0xd3, 0xed, 0xbb, 0xb0, 0x96, 0xce, 0x90, 0xdd, 0x81, 0x96, 0x5b, 0xf3, 0x36, 0xf4, 0x98,
	0x0b, 0xe0, 0x2a, 0xcc, 0xcc, 0xec, 0xd2, 0x65, 0xbb, 0x4b, 0xe0, 0xf4, 0x3b, 0x81, 0x99, 0xe7,
	0x7d, 0x9e, 0x67, 0xe7, 0xfd, 0x99, 0xcd, 0x42, 0xc1, 0xa2, 0xac, 0x6e, 0x51, 0x56, 0x1b, 0x3b,
	0x5c, 0x70, 0xb2, 0x6b, 0x51, 0x56, 0xce, 0x0d, 0x78, 0x7d, 0xc0, 0x35, 0x52, 0x7e, 0x2f, 0x09,
	0x83, 0x11, 0xbf, 0xa7, 0x23, 0x0f, 0x21, 0x9e, 0xa4, 0x6f, 0x33, 0x8b, 0x87, 0x31, 0x73, 0x34,
	0xb9, 0xd7, 0x58, 0xf5, 0xdf, 0x04, 0xec, 0x74, 0x91, 0x1c, 0x43, 0x9a, 0x9a, 0x26, 0x9f, 0x30,
	0x51, 0x4a, 0x1c, 0x25, 0x4e, 0xb2, 0xad, 0xdc, 0x62, 0x5e, 0xf1, 0x21, 0xc3, 0x5f, 0x90, 0x13,
	0xc8, 0x30, 0xdb, 0x7c, 0x64, 0xf4, 0x09, 0x4b, 0x3b, 0x8a, 0x97, 0x5f, 0xcc, 0x2b, 0x4b, 0xcc,
	0x58, 0xae, 0x48, 0x15, 0x52, 0x74, 0x4a, 0x05, 0x75, 0x4a, 0xbb, 0x8a, 0x07, 0x8b, 0x79, 0xc5,
	0x43, 0x0c, 0xef, 0x9f, 0x7c, 0x06, 0x49, 0x79, 0x92, 0x52, 0x52, 0x31, 0x32, 0x8b, 0x79, 0x45,
	0xed, 0x0d, 0xf5, 0x4b, 0xce, 0xa1, 0x48, 0x27, 0x62, 0x88, 0x4c, 0xd8, 0x26, 0x15, 0x36, 0x67,
	0xa5, 0x77, 0x47, 0x89, 0x93, 0x4c, 0x8b, 0x2c, 0xe6, 0x95, 0x50, 0xc4, 0x08, 0xed, 0xab, 0xff,
	0x25, 0x60, 0xb7, 0x43, 0xd9, 0x87, 0x96, 0xd6, 0x3f, 0x09, 0x80, 0x6b, 0x7c, 0xee, 0x50, 0x76,
	0xc3, 0x5d, 0x41, 0xce, 0x20, 0xff, 0x27, 0xb6, 0x87, 0x54, 0xdc, 0xba, 0xe8, 0x5c, 0xfc, 0xa2,
	0x52, 0x4c, 0xb6, 0xf6, 0x17, 0xf3, 0xca, 0xde, 0x33, 0xf6, 0xcd, 0x21, 0x15, 0xfd, 0x89, 0x8b,
	0x4e, 0xdf, 0x7e, 0x30, 0x56, 0x88, 0xb2, 0x2c, 0x4d, 0xaf, 0x2c, 0x3b, 0x11, 0x65, 0xf1, 0x62,
	0x32, 0xd9, 0x66, 0x6c, 0xb2, 0x3a, 0x22, 0x4b, 0x77, 0xed, 0x97, 0x2e, 0x19, 0x55, 0x3a, 0x3f,
	0x5a, 0x6d, 0xc2, 0x61, 0x7b, 0x48, 0xd9, 0x00, 0x3b, 0x94, 0xf9, 0xa0, 0x4a, 0x23, 0x68, 0x91,
	0x58, 0x6b, 0xf1, 0x13, 0x1c, 0x2c, 0x2d, 0xbc, 0x43, 0x2a, 0x87, 0xcd, 0xf2, 0xa9, 0xde, 0x01,
	0x74, 0xd1, 0x40, 0x77, 0xcc, 0x99, 0xab, 0x46, 0xfe, 0x09, 0x5d, 0x97, 0x0e, 0x30, 0x38, 0x1b,
	0x1e, 0x64, 0xf8, 0x0b, 0x72, 0x0c, 0xc9, 0x07, 0x2a, 0xa8, 0x32, 0xce, 0x35, 0xd2, 0x35, 0x79,
	0x0d, 0xbb, 0xa8, 0xdb, 0x2a, 0x03, 0x86, 0xfa, 0xad, 0xfe, 0x05, 0xb9, 0x0e, 0x65, 0xdb, 0x9a,
	0x7f, 0xb1, 0x62, 0x9e, 0x51, 0xe6, 0x1d, 0xca, 0xc2, 0xee, 0x8d, 0x45, 0x0e, 0xa0, 0x43, 0x59,
	0x0f, 0x9d, 0xa9, 0x6d, 0x22, 0xa9, 0x41, 0x4a, 0x8f, 0x01, 0xd9, 0x53, 0x92, 0xd7, 0x99, 0x28,
	0x7f, 0xac, 0x80, 0x16, 0xe7, 0x23, 0xff, 0x2c, 0xd5, 0x8f, 0xc8, 0x97, 0xea, 0x8e, 0x17, 0x55,
	0xe8, 0xd7, 0xa7, 0xb1, 0x98, 0x29, 0xea, 0x9e, 0x97, 0xcb, 0x0a, 0x51, 0x5d, 0x9b, 0xbc, 0x8a,
	0x5c, 0xa1, 0xe6, 0xbd, 0xf7, 0x8f, 0x15, 0x20, 0x36, 0x20, 0xd3, 0xc3, 0x91, 0x75, 0xc1, 0x2c,
	0xfe, 0xc6, 0xf7, 0xc0, 0xe7, 0xcb, 0x68, 0x40, 0xf3, 0x35, 0xa4, 0x3d, 0x90, 0x14, 0x14, 0x45,
	0x2e, 0xd7, 0x2a, 0x9a, 0x50, 0xd4, 0xfd, 0xf6, 0x27, 0x80, 0x94, 0x15, 0x33, 0x72, 0x8e, 0xa2,
	0x53, 0xff, 0x19, 0x0a, 0x9a, 0xed, 0x0f, 0xf5, 0xa7, 0xab, 0x0e, 0x81, 0x31, 0x8a, 0x36, 0xf8,
	0x16, 0xb2, 0x9a, 0xdc, 0xc3, 0x17, 0x42, 0x02, 0xe2, 0x1e, 0xbe, 0xc4, 0xab, 0x7e, 0x80, 0xc2,
	0xed, 0xf8, 0x81, 0x0a, 0xf5, 0x08, 0x07, 0x29, 0xd9, 0x57, 0x2c, 0x8d, 0x49, 0x20, 0x5e, 0xfa,
	0x15, 0xa4, 0xba, 0xb3, 0xb6, 0x7c, 0x55, 0x84, 0x0b, 0xab, 0xe9, 0x32, 0xb4, 0x52, 0x55, 0x68,
	0x0f, 0x39, 0x77, 0x51, 0x49, 0x42, 0x85, 0x8d, 0x7c, 0x80, 0xee, 0x43, 0x14, 0x7d, 0xd9, 0x87,
	0xd0, 0x33, 0xbe, 0x83, 0x9c, 0xec, 0xb6, 0xaf, 0x8a, 0x6d, 0xf8, 0x1b, 0x59, 0xb6, 0x3b, 0x8b,
	0x13, 0x7d, 0xa2, 0xa7, 0x6f, 0xf6, 0x56, 0x76, 0x09, 0x70, 0x43, 0x07, 0x36, 0x53, 0xef, 0x3c,
	0xaf, 0xe3, 0x1e, 0xeb, 0x15, 0x57, 0x1e, 0x9f, 0x47, 0xc7, 0x02, 0x5e, 0xdf, 0x43, 0xaa, 0xed,
	0x20, 0x15, 0x48, 0xf4, 0xf3, 0xf4, 0xc6, 0x57, 0xac, 0x3b, 0x7c, 0x1d, 0x32, 0x7f, 0x38, 0x94,
	0xb9, 0x16, 0x3a, 0x31, 0x8d, 0x08, 0x95, 0xf5, 0x1c, 0x8a, 0xba, 0xbd, 0xd2, 0x68, 0xcb, 0x9e,
	0x7f, 0x03, 0xa9, 0x0b, 0x36, 0xb5, 0x05, 0x7a, 0x13, 0xa6, 0x37, 0x6b, 0xef, 0x74, 0x03, 0xf2,
	0x6d, 0xca, 0x4c, 0x1c, 0x79, 0xc2, 0x4d, 0x3a, 0xdf, 0x80, 0x7c, 0xd3, 0x34, 0x71, 0x2c, 0xb6,
	0xd0, 0x9c, 0x43, 0xde, 0xc0, 0xbf, 0xd1, 0xf4, 0x35, 0x87, 0x8a, 0x14, 0x84, 0xd6, 0xa5, 0x95,
	0xbc, 0xe4, 0x36, 0x23, 0xba, 0xc6, 0x72, 0x19, 0xac, 0x7c, 0xcc, 0x70, 0x82, 0x4e, 0x4b, 0x09,
	0x37, 0x39, 0x60, 0x1d, 0xb2, 0xcd, 0x81, 0x83, 0xb8, 0xb1, 0xe0, 0x0c, 0x40, 0x1f, 0x7f, 0xdb,
	0xb3, 0x9d, 0xc2, 0xbb, 0xdf, 0x90, 0x4e, 0xfd, 0x1a, 0xa8, 0xf5, 0x06, 0x09, 0xa5, 0xaf, 0x6c,
	0xf3, 0xf1, 0xf7, 0x89, 0x20, 0xfa, 0x45, 0xea, 0xed, 0x62, 0x15, 0xad, 0xdc, 0x5d, 0xb6, 0x26,
	0x3f, 0xd3, 0x7e, 0xb4, 0x28, 0xbb, 0x4f, 0xa9, 0xcf, 0xb4, 0xd3, 0xff, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x78, 0xa9, 0x92, 0x10, 0x03, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FanServiceClient is the client API for FanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FanServiceClient interface {
	// Fan
	NewFan(ctx context.Context, in *NewFanPost, opts ...grpc.CallOption) (*BoolResponse, error)
	Me(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MeResponse, error)
	Fan(ctx context.Context, in *KeyPost, opts ...grpc.CallOption) (*FanResponse, error)
	SelfInfo(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*FanInfoResponse, error)
	FanInfo(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*FanInfoResponse, error)
	ChangeNickname(ctx context.Context, in *ChangeFanNicknamePost, opts ...grpc.CallOption) (*BoolResponse, error)
	ChangeAccount(ctx context.Context, in *ChangeFanAccountPost, opts ...grpc.CallOption) (*BoolResponse, error)
	ChangeSex(ctx context.Context, in *ChangeSexPost, opts ...grpc.CallOption) (*BoolResponse, error)
	UpdateFanArea(ctx context.Context, in *UpdateAreaPost, opts ...grpc.CallOption) (*BoolResponse, error)
	// Club
	MyClub(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*ClubResponse, error)
	ChooseClub(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error)
	// FanClub
	FanClub(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*FanClubResponse, error)
	SelfFanClub(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*FanClubResponse, error)
	MyFanClub(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MyFanClubResponse, error)
	Pagination(ctx context.Context, in *FanClubPaginationPost, opts ...grpc.CallOption) (*FanClubPaginationResponse, error)
	Create(ctx context.Context, in *CreateFanClubPost, opts ...grpc.CallOption) (*FanClubResponse, error)
	Transfer(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BoolResponse, error)
	UpdateClubArea(ctx context.Context, in *UpdateAreaPost, opts ...grpc.CallOption) (*BoolResponse, error)
	// Invite
	Invite(ctx context.Context, in *InviteFanPost, opts ...grpc.CallOption) (*BoolResponse, error)
	CancelInvite(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error)
	AcceptInvite(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error)
	RejectInvite(ctx context.Context, in *RejectInvitePost, opts ...grpc.CallOption) (*BoolResponse, error)
	// Join
	Join(ctx context.Context, in *JoinFanClubPost, opts ...grpc.CallOption) (*BoolResponse, error)
	CancelJoin(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error)
	AgreeJoin(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error)
	RejectJoin(ctx context.Context, in *JoinFanClubPost, opts ...grpc.CallOption) (*BoolResponse, error)
	// Leave
	Leave(ctx context.Context, in *LeaveFanClubPost, opts ...grpc.CallOption) (*BoolResponse, error)
	KickOut(ctx context.Context, in *KickOutPost, opts ...grpc.CallOption) (*BoolResponse, error)
}

type fanServiceClient struct {
	cc *grpc.ClientConn
}

func NewFanServiceClient(cc *grpc.ClientConn) FanServiceClient {
	return &fanServiceClient{cc}
}

func (c *fanServiceClient) NewFan(ctx context.Context, in *NewFanPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/NewFan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) Me(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MeResponse, error) {
	out := new(MeResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/Me", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) Fan(ctx context.Context, in *KeyPost, opts ...grpc.CallOption) (*FanResponse, error) {
	out := new(FanResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/Fan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) SelfInfo(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*FanInfoResponse, error) {
	out := new(FanInfoResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/SelfInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) FanInfo(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*FanInfoResponse, error) {
	out := new(FanInfoResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/FanInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) ChangeNickname(ctx context.Context, in *ChangeFanNicknamePost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/ChangeNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) ChangeAccount(ctx context.Context, in *ChangeFanAccountPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/ChangeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) ChangeSex(ctx context.Context, in *ChangeSexPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/ChangeSex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) UpdateFanArea(ctx context.Context, in *UpdateAreaPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/UpdateFanArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) MyClub(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*ClubResponse, error) {
	out := new(ClubResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/MyClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) ChooseClub(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/ChooseClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) FanClub(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*FanClubResponse, error) {
	out := new(FanClubResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/FanClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) SelfFanClub(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*FanClubResponse, error) {
	out := new(FanClubResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/SelfFanClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) MyFanClub(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MyFanClubResponse, error) {
	out := new(MyFanClubResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/MyFanClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) Pagination(ctx context.Context, in *FanClubPaginationPost, opts ...grpc.CallOption) (*FanClubPaginationResponse, error) {
	out := new(FanClubPaginationResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/Pagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) Create(ctx context.Context, in *CreateFanClubPost, opts ...grpc.CallOption) (*FanClubResponse, error) {
	out := new(FanClubResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) Transfer(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) UpdateClubArea(ctx context.Context, in *UpdateAreaPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/UpdateClubArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) Invite(ctx context.Context, in *InviteFanPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/Invite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) CancelInvite(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/CancelInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) AcceptInvite(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/AcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) RejectInvite(ctx context.Context, in *RejectInvitePost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/RejectInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) Join(ctx context.Context, in *JoinFanClubPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) CancelJoin(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/CancelJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) AgreeJoin(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/AgreeJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) RejectJoin(ctx context.Context, in *JoinFanClubPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/RejectJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) Leave(ctx context.Context, in *LeaveFanClubPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fanServiceClient) KickOut(ctx context.Context, in *KickOutPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/fan.FanService/KickOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FanServiceServer is the server API for FanService service.
type FanServiceServer interface {
	// Fan
	NewFan(context.Context, *NewFanPost) (*BoolResponse, error)
	Me(context.Context, *EmptyPost) (*MeResponse, error)
	Fan(context.Context, *KeyPost) (*FanResponse, error)
	SelfInfo(context.Context, *EmptyPost) (*FanInfoResponse, error)
	FanInfo(context.Context, *InfoPost) (*FanInfoResponse, error)
	ChangeNickname(context.Context, *ChangeFanNicknamePost) (*BoolResponse, error)
	ChangeAccount(context.Context, *ChangeFanAccountPost) (*BoolResponse, error)
	ChangeSex(context.Context, *ChangeSexPost) (*BoolResponse, error)
	UpdateFanArea(context.Context, *UpdateAreaPost) (*BoolResponse, error)
	// Club
	MyClub(context.Context, *EmptyPost) (*ClubResponse, error)
	ChooseClub(context.Context, *InfoPost) (*BoolResponse, error)
	// FanClub
	FanClub(context.Context, *InfoPost) (*FanClubResponse, error)
	SelfFanClub(context.Context, *EmptyPost) (*FanClubResponse, error)
	MyFanClub(context.Context, *EmptyPost) (*MyFanClubResponse, error)
	Pagination(context.Context, *FanClubPaginationPost) (*FanClubPaginationResponse, error)
	Create(context.Context, *CreateFanClubPost) (*FanClubResponse, error)
	Transfer(context.Context, *EmptyPost) (*BoolResponse, error)
	UpdateClubArea(context.Context, *UpdateAreaPost) (*BoolResponse, error)
	// Invite
	Invite(context.Context, *InviteFanPost) (*BoolResponse, error)
	CancelInvite(context.Context, *InfoPost) (*BoolResponse, error)
	AcceptInvite(context.Context, *InfoPost) (*BoolResponse, error)
	RejectInvite(context.Context, *RejectInvitePost) (*BoolResponse, error)
	// Join
	Join(context.Context, *JoinFanClubPost) (*BoolResponse, error)
	CancelJoin(context.Context, *InfoPost) (*BoolResponse, error)
	AgreeJoin(context.Context, *InfoPost) (*BoolResponse, error)
	RejectJoin(context.Context, *JoinFanClubPost) (*BoolResponse, error)
	// Leave
	Leave(context.Context, *LeaveFanClubPost) (*BoolResponse, error)
	KickOut(context.Context, *KickOutPost) (*BoolResponse, error)
}

// UnimplementedFanServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFanServiceServer struct {
}

func (*UnimplementedFanServiceServer) NewFan(ctx context.Context, req *NewFanPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFan not implemented")
}
func (*UnimplementedFanServiceServer) Me(ctx context.Context, req *EmptyPost) (*MeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (*UnimplementedFanServiceServer) Fan(ctx context.Context, req *KeyPost) (*FanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fan not implemented")
}
func (*UnimplementedFanServiceServer) SelfInfo(ctx context.Context, req *EmptyPost) (*FanInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfInfo not implemented")
}
func (*UnimplementedFanServiceServer) FanInfo(ctx context.Context, req *InfoPost) (*FanInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FanInfo not implemented")
}
func (*UnimplementedFanServiceServer) ChangeNickname(ctx context.Context, req *ChangeFanNicknamePost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNickname not implemented")
}
func (*UnimplementedFanServiceServer) ChangeAccount(ctx context.Context, req *ChangeFanAccountPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccount not implemented")
}
func (*UnimplementedFanServiceServer) ChangeSex(ctx context.Context, req *ChangeSexPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSex not implemented")
}
func (*UnimplementedFanServiceServer) UpdateFanArea(ctx context.Context, req *UpdateAreaPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFanArea not implemented")
}
func (*UnimplementedFanServiceServer) MyClub(ctx context.Context, req *EmptyPost) (*ClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyClub not implemented")
}
func (*UnimplementedFanServiceServer) ChooseClub(ctx context.Context, req *InfoPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChooseClub not implemented")
}
func (*UnimplementedFanServiceServer) FanClub(ctx context.Context, req *InfoPost) (*FanClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FanClub not implemented")
}
func (*UnimplementedFanServiceServer) SelfFanClub(ctx context.Context, req *EmptyPost) (*FanClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfFanClub not implemented")
}
func (*UnimplementedFanServiceServer) MyFanClub(ctx context.Context, req *EmptyPost) (*MyFanClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyFanClub not implemented")
}
func (*UnimplementedFanServiceServer) Pagination(ctx context.Context, req *FanClubPaginationPost) (*FanClubPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pagination not implemented")
}
func (*UnimplementedFanServiceServer) Create(ctx context.Context, req *CreateFanClubPost) (*FanClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedFanServiceServer) Transfer(ctx context.Context, req *EmptyPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedFanServiceServer) UpdateClubArea(ctx context.Context, req *UpdateAreaPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClubArea not implemented")
}
func (*UnimplementedFanServiceServer) Invite(ctx context.Context, req *InviteFanPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (*UnimplementedFanServiceServer) CancelInvite(ctx context.Context, req *InfoPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInvite not implemented")
}
func (*UnimplementedFanServiceServer) AcceptInvite(ctx context.Context, req *InfoPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (*UnimplementedFanServiceServer) RejectInvite(ctx context.Context, req *RejectInvitePost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectInvite not implemented")
}
func (*UnimplementedFanServiceServer) Join(ctx context.Context, req *JoinFanClubPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedFanServiceServer) CancelJoin(ctx context.Context, req *InfoPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJoin not implemented")
}
func (*UnimplementedFanServiceServer) AgreeJoin(ctx context.Context, req *InfoPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeJoin not implemented")
}
func (*UnimplementedFanServiceServer) RejectJoin(ctx context.Context, req *JoinFanClubPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectJoin not implemented")
}
func (*UnimplementedFanServiceServer) Leave(ctx context.Context, req *LeaveFanClubPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (*UnimplementedFanServiceServer) KickOut(ctx context.Context, req *KickOutPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickOut not implemented")
}

func RegisterFanServiceServer(s *grpc.Server, srv FanServiceServer) {
	s.RegisterService(&_FanService_serviceDesc, srv)
}

func _FanService_NewFan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFanPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).NewFan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/NewFan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).NewFan(ctx, req.(*NewFanPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/Me",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).Me(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_Fan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).Fan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/Fan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).Fan(ctx, req.(*KeyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_SelfInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).SelfInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/SelfInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).SelfInfo(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_FanInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).FanInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/FanInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).FanInfo(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_ChangeNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeFanNicknamePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).ChangeNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/ChangeNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).ChangeNickname(ctx, req.(*ChangeFanNicknamePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_ChangeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeFanAccountPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).ChangeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/ChangeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).ChangeAccount(ctx, req.(*ChangeFanAccountPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_ChangeSex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSexPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).ChangeSex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/ChangeSex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).ChangeSex(ctx, req.(*ChangeSexPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_UpdateFanArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAreaPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).UpdateFanArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/UpdateFanArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).UpdateFanArea(ctx, req.(*UpdateAreaPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_MyClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).MyClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/MyClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).MyClub(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_ChooseClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).ChooseClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/ChooseClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).ChooseClub(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_FanClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).FanClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/FanClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).FanClub(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_SelfFanClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).SelfFanClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/SelfFanClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).SelfFanClub(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_MyFanClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).MyFanClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/MyFanClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).MyFanClub(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_Pagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FanClubPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).Pagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/Pagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).Pagination(ctx, req.(*FanClubPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFanClubPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).Create(ctx, req.(*CreateFanClubPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).Transfer(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_UpdateClubArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAreaPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).UpdateClubArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/UpdateClubArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).UpdateClubArea(ctx, req.(*UpdateAreaPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteFanPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).Invite(ctx, req.(*InviteFanPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_CancelInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).CancelInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/CancelInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).CancelInvite(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/AcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).AcceptInvite(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_RejectInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectInvitePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).RejectInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/RejectInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).RejectInvite(ctx, req.(*RejectInvitePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinFanClubPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).Join(ctx, req.(*JoinFanClubPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_CancelJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).CancelJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/CancelJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).CancelJoin(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_AgreeJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).AgreeJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/AgreeJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).AgreeJoin(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_RejectJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinFanClubPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).RejectJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/RejectJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).RejectJoin(ctx, req.(*JoinFanClubPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveFanClubPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).Leave(ctx, req.(*LeaveFanClubPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _FanService_KickOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickOutPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanServiceServer).KickOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fan.FanService/KickOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanServiceServer).KickOut(ctx, req.(*KickOutPost))
	}
	return interceptor(ctx, in, info, handler)
}

var _FanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fan.FanService",
	HandlerType: (*FanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewFan",
			Handler:    _FanService_NewFan_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _FanService_Me_Handler,
		},
		{
			MethodName: "Fan",
			Handler:    _FanService_Fan_Handler,
		},
		{
			MethodName: "SelfInfo",
			Handler:    _FanService_SelfInfo_Handler,
		},
		{
			MethodName: "FanInfo",
			Handler:    _FanService_FanInfo_Handler,
		},
		{
			MethodName: "ChangeNickname",
			Handler:    _FanService_ChangeNickname_Handler,
		},
		{
			MethodName: "ChangeAccount",
			Handler:    _FanService_ChangeAccount_Handler,
		},
		{
			MethodName: "ChangeSex",
			Handler:    _FanService_ChangeSex_Handler,
		},
		{
			MethodName: "UpdateFanArea",
			Handler:    _FanService_UpdateFanArea_Handler,
		},
		{
			MethodName: "MyClub",
			Handler:    _FanService_MyClub_Handler,
		},
		{
			MethodName: "ChooseClub",
			Handler:    _FanService_ChooseClub_Handler,
		},
		{
			MethodName: "FanClub",
			Handler:    _FanService_FanClub_Handler,
		},
		{
			MethodName: "SelfFanClub",
			Handler:    _FanService_SelfFanClub_Handler,
		},
		{
			MethodName: "MyFanClub",
			Handler:    _FanService_MyFanClub_Handler,
		},
		{
			MethodName: "Pagination",
			Handler:    _FanService_Pagination_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _FanService_Create_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _FanService_Transfer_Handler,
		},
		{
			MethodName: "UpdateClubArea",
			Handler:    _FanService_UpdateClubArea_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _FanService_Invite_Handler,
		},
		{
			MethodName: "CancelInvite",
			Handler:    _FanService_CancelInvite_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _FanService_AcceptInvite_Handler,
		},
		{
			MethodName: "RejectInvite",
			Handler:    _FanService_RejectInvite_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _FanService_Join_Handler,
		},
		{
			MethodName: "CancelJoin",
			Handler:    _FanService_CancelJoin_Handler,
		},
		{
			MethodName: "AgreeJoin",
			Handler:    _FanService_AgreeJoin_Handler,
		},
		{
			MethodName: "RejectJoin",
			Handler:    _FanService_RejectJoin_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _FanService_Leave_Handler,
		},
		{
			MethodName: "KickOut",
			Handler:    _FanService_KickOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fan/fan.proto",
}
