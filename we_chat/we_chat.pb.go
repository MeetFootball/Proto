// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: we_chat/we_chat.proto

package we_chat

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("we_chat/we_chat.proto", fileDescriptor_d2993388e5b9adcd) }

var fileDescriptor_d2993388e5b9adcd = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x4f, 0x8d, 0x4f,
	0xce, 0x48, 0x2c, 0xd1, 0x87, 0xd2, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xec, 0x50, 0xae,
	0x94, 0x08, 0x4c, 0x3e, 0x3d, 0x27, 0x3f, 0x29, 0x31, 0x07, 0x22, 0x2d, 0x25, 0x85, 0xa6, 0x2b,
	0xbe, 0xb4, 0x38, 0xb5, 0x08, 0x22, 0x67, 0xb4, 0x87, 0x91, 0x8b, 0x37, 0x3c, 0xd5, 0x39, 0x23,
	0xb1, 0x24, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x92, 0x8b, 0xcb, 0x39, 0x23, 0x35,
	0x39, 0x3b, 0x24, 0x3f, 0x3b, 0x35, 0x4f, 0x48, 0x48, 0x0f, 0x66, 0x95, 0x6b, 0x6e, 0x41, 0x49,
	0x65, 0x40, 0x7e, 0x71, 0x89, 0x94, 0x28, 0x5c, 0xcc, 0x29, 0x3f, 0x3f, 0x27, 0x28, 0xb5, 0xb8,
	0x20, 0x3f, 0xaf, 0x38, 0x55, 0x89, 0x41, 0xc8, 0x94, 0x8b, 0xd5, 0x27, 0x3f, 0x3d, 0x13, 0x59,
	0x17, 0x98, 0x0f, 0xd6, 0x25, 0x86, 0x2a, 0x86, 0xa4, 0xcd, 0x92, 0x8b, 0x25, 0x38, 0x35, 0x27,
	0x0d, 0xab, 0x5d, 0xd2, 0x70, 0x31, 0x88, 0x2b, 0x43, 0x8b, 0x53, 0x8b, 0x10, 0x5a, 0x9d, 0x84,
	0xa3, 0x04, 0xf5, 0x60, 0xde, 0xb2, 0x86, 0xd2, 0x49, 0x6c, 0x60, 0xaf, 0x19, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x6d, 0x9d, 0xbe, 0xbb, 0x2e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WeChatServiceClient is the client API for WeChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WeChatServiceClient interface {
	// Login
	CheckToken(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BoolResponse, error)
	Login(ctx context.Context, in *LoginPost, opts ...grpc.CallOption) (*LoginResponse, error)
	// User
	Self(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*WeChatUserResponse, error)
}

type weChatServiceClient struct {
	cc *grpc.ClientConn
}

func NewWeChatServiceClient(cc *grpc.ClientConn) WeChatServiceClient {
	return &weChatServiceClient{cc}
}

func (c *weChatServiceClient) CheckToken(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/we_chat.WeChatService/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatServiceClient) Login(ctx context.Context, in *LoginPost, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/we_chat.WeChatService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatServiceClient) Self(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*WeChatUserResponse, error) {
	out := new(WeChatUserResponse)
	err := c.cc.Invoke(ctx, "/we_chat.WeChatService/Self", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeChatServiceServer is the server API for WeChatService service.
type WeChatServiceServer interface {
	// Login
	CheckToken(context.Context, *EmptyPost) (*BoolResponse, error)
	Login(context.Context, *LoginPost) (*LoginResponse, error)
	// User
	Self(context.Context, *EmptyPost) (*WeChatUserResponse, error)
}

// UnimplementedWeChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWeChatServiceServer struct {
}

func (*UnimplementedWeChatServiceServer) CheckToken(ctx context.Context, req *EmptyPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (*UnimplementedWeChatServiceServer) Login(ctx context.Context, req *LoginPost) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedWeChatServiceServer) Self(ctx context.Context, req *EmptyPost) (*WeChatUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Self not implemented")
}

func RegisterWeChatServiceServer(s *grpc.Server, srv WeChatServiceServer) {
	s.RegisterService(&_WeChatService_serviceDesc, srv)
}

func _WeChatService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/we_chat.WeChatService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatServiceServer).CheckToken(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/we_chat.WeChatService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatServiceServer).Login(ctx, req.(*LoginPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatService_Self_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatServiceServer).Self(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/we_chat.WeChatService/Self",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatServiceServer).Self(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

var _WeChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "we_chat.WeChatService",
	HandlerType: (*WeChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckToken",
			Handler:    _WeChatService_CheckToken_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _WeChatService_Login_Handler,
		},
		{
			MethodName: "Self",
			Handler:    _WeChatService_Self_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "we_chat/we_chat.proto",
}
