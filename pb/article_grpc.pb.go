// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleServiceClient interface {
	// 标签管理
	Tag(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*TagResponse, error)
	Tags(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*TagsResponse, error)
	TagPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*TagPaginationResponse, error)
	CreateTag(ctx context.Context, in *CreateTagPost, opts ...grpc.CallOption) (*TagResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagPost, opts ...grpc.CallOption) (*TagResponse, error)
	ChangeTagStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*TagResponse, error)
}

type articleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServiceClient(cc grpc.ClientConnInterface) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) Tag(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleService/Tag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Tags(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*TagsResponse, error) {
	out := new(TagsResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleService/Tags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) TagPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*TagPaginationResponse, error) {
	out := new(TagPaginationResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleService/TagPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) CreateTag(ctx context.Context, in *CreateTagPost, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) UpdateTag(ctx context.Context, in *UpdateTagPost, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleService/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) ChangeTagStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleService/ChangeTagStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServiceServer is the server API for ArticleService service.
// All implementations must embed UnimplementedArticleServiceServer
// for forward compatibility
type ArticleServiceServer interface {
	// 标签管理
	Tag(context.Context, *InfoPost) (*TagResponse, error)
	Tags(context.Context, *EmptyPost) (*TagsResponse, error)
	TagPagination(context.Context, *PaginationPost) (*TagPaginationResponse, error)
	CreateTag(context.Context, *CreateTagPost) (*TagResponse, error)
	UpdateTag(context.Context, *UpdateTagPost) (*TagResponse, error)
	ChangeTagStatus(context.Context, *ChangeStatusPost) (*TagResponse, error)
	mustEmbedUnimplementedArticleServiceServer()
}

// UnimplementedArticleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServiceServer struct {
}

func (UnimplementedArticleServiceServer) Tag(context.Context, *InfoPost) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tag not implemented")
}
func (UnimplementedArticleServiceServer) Tags(context.Context, *EmptyPost) (*TagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tags not implemented")
}
func (UnimplementedArticleServiceServer) TagPagination(context.Context, *PaginationPost) (*TagPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagPagination not implemented")
}
func (UnimplementedArticleServiceServer) CreateTag(context.Context, *CreateTagPost) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedArticleServiceServer) UpdateTag(context.Context, *UpdateTagPost) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedArticleServiceServer) ChangeTagStatus(context.Context, *ChangeStatusPost) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTagStatus not implemented")
}
func (UnimplementedArticleServiceServer) mustEmbedUnimplementedArticleServiceServer() {}

// UnsafeArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServiceServer will
// result in compilation errors.
type UnsafeArticleServiceServer interface {
	mustEmbedUnimplementedArticleServiceServer()
}

func RegisterArticleServiceServer(s grpc.ServiceRegistrar, srv ArticleServiceServer) {
	s.RegisterService(&ArticleService_ServiceDesc, srv)
}

func _ArticleService_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleService/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Tag(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Tags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Tags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleService/Tags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Tags(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_TagPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).TagPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleService/TagPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).TagPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).CreateTag(ctx, req.(*CreateTagPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleService/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).UpdateTag(ctx, req.(*UpdateTagPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_ChangeTagStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).ChangeTagStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleService/ChangeTagStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).ChangeTagStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleService_ServiceDesc is the grpc.ServiceDesc for ArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tag",
			Handler:    _ArticleService_Tag_Handler,
		},
		{
			MethodName: "Tags",
			Handler:    _ArticleService_Tags_Handler,
		},
		{
			MethodName: "TagPagination",
			Handler:    _ArticleService_TagPagination_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _ArticleService_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ArticleService_UpdateTag_Handler,
		},
		{
			MethodName: "ChangeTagStatus",
			Handler:    _ArticleService_ChangeTagStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article/article.proto",
}
