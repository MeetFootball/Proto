// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeChatServiceClient is the client API for WeChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeChatServiceClient interface {
	// Login
	CheckToken(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BoolResponse, error)
	Login(ctx context.Context, in *LoginPost, opts ...grpc.CallOption) (*LoginResponse, error)
	// User
	Self(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*WeChatUserResponse, error)
}

type weChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeChatServiceClient(cc grpc.ClientConnInterface) WeChatServiceClient {
	return &weChatServiceClient{cc}
}

func (c *weChatServiceClient) CheckToken(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/we_chat.WeChatService/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatServiceClient) Login(ctx context.Context, in *LoginPost, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/we_chat.WeChatService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatServiceClient) Self(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*WeChatUserResponse, error) {
	out := new(WeChatUserResponse)
	err := c.cc.Invoke(ctx, "/we_chat.WeChatService/Self", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeChatServiceServer is the server API for WeChatService service.
// All implementations must embed UnimplementedWeChatServiceServer
// for forward compatibility
type WeChatServiceServer interface {
	// Login
	CheckToken(context.Context, *EmptyPost) (*BoolResponse, error)
	Login(context.Context, *LoginPost) (*LoginResponse, error)
	// User
	Self(context.Context, *EmptyPost) (*WeChatUserResponse, error)
	mustEmbedUnimplementedWeChatServiceServer()
}

// UnimplementedWeChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWeChatServiceServer struct {
}

func (UnimplementedWeChatServiceServer) CheckToken(context.Context, *EmptyPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedWeChatServiceServer) Login(context.Context, *LoginPost) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedWeChatServiceServer) Self(context.Context, *EmptyPost) (*WeChatUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Self not implemented")
}
func (UnimplementedWeChatServiceServer) mustEmbedUnimplementedWeChatServiceServer() {}

// UnsafeWeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeChatServiceServer will
// result in compilation errors.
type UnsafeWeChatServiceServer interface {
	mustEmbedUnimplementedWeChatServiceServer()
}

func RegisterWeChatServiceServer(s grpc.ServiceRegistrar, srv WeChatServiceServer) {
	s.RegisterService(&WeChatService_ServiceDesc, srv)
}

func _WeChatService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/we_chat.WeChatService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatServiceServer).CheckToken(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/we_chat.WeChatService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatServiceServer).Login(ctx, req.(*LoginPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatService_Self_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatServiceServer).Self(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/we_chat.WeChatService/Self",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatServiceServer).Self(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

// WeChatService_ServiceDesc is the grpc.ServiceDesc for WeChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "we_chat.WeChatService",
	HandlerType: (*WeChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckToken",
			Handler:    _WeChatService_CheckToken_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _WeChatService_Login_Handler,
		},
		{
			MethodName: "Self",
			Handler:    _WeChatService_Self_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "we_chat/we_chat.proto",
}
