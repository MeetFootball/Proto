// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalServiceClient is the client API for ExternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalServiceClient interface {
	// 外网站点信息
	Website(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WebsiteResponse, error)
	Websites(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*WebsitesResponse, error)
	WebsitePagination(ctx context.Context, in *SearchPaginationPost, opts ...grpc.CallOption) (*WebsitePaginationResponse, error)
	CreateWebsite(ctx context.Context, in *CreateWebsitePost, opts ...grpc.CallOption) (*WebsiteResponse, error)
	UpdateWebsite(ctx context.Context, in *UpdateWebsitePost, opts ...grpc.CallOption) (*WebsiteResponse, error)
	ChangeWebsiteStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*WebsiteResponse, error)
	// 外网站点 抓取任务
	WebsiteJob(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WebsiteJobResponse, error)
	WebsiteJobs(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*WebsiteJobsResponse, error)
	WebsiteJobPagination(ctx context.Context, in *SearchWebsiteJobPaginationPost, opts ...grpc.CallOption) (*WebsiteJobPaginationResponse, error)
	CreateWebsiteJob(ctx context.Context, in *CreateWebsiteJobPost, opts ...grpc.CallOption) (*WebsiteJobResponse, error)
	UpdateWebsiteJob(ctx context.Context, in *UpdateWebsiteJobPost, opts ...grpc.CallOption) (*WebsiteJobResponse, error)
	ChangeWebsiteJobStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*WebsiteJobResponse, error)
	// 抓取新闻
	News(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*NewsResponse, error)
	NewsPagination(ctx context.Context, in *SearchNewsPaginationPost, opts ...grpc.CallOption) (*NewsPaginationResponse, error)
	ManualGrabNewsList(ctx context.Context, in *ManualGrabNewsListPost, opts ...grpc.CallOption) (*Response, error)
	GrabNews(ctx context.Context, in *GrabNewsPost, opts ...grpc.CallOption) (*Response, error)
	TranslateNews(ctx context.Context, in *TranslateNewsPost, opts ...grpc.CallOption) (*NewsResponse, error)
	TranslateNewsContent(ctx context.Context, in *TranslateNewsContentPost, opts ...grpc.CallOption) (*NewsResponse, error)
	UpdateNews(ctx context.Context, in *UpdateNewsPost, opts ...grpc.CallOption) (*NewsResponse, error)
	RemoveNews(ctx context.Context, in *RemoveNewsPost, opts ...grpc.CallOption) (*NewsResponse, error)
}

type externalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalServiceClient(cc grpc.ClientConnInterface) ExternalServiceClient {
	return &externalServiceClient{cc}
}

func (c *externalServiceClient) Website(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WebsiteResponse, error) {
	out := new(WebsiteResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/Website", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) Websites(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*WebsitesResponse, error) {
	out := new(WebsitesResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/Websites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) WebsitePagination(ctx context.Context, in *SearchPaginationPost, opts ...grpc.CallOption) (*WebsitePaginationResponse, error) {
	out := new(WebsitePaginationResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/WebsitePagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) CreateWebsite(ctx context.Context, in *CreateWebsitePost, opts ...grpc.CallOption) (*WebsiteResponse, error) {
	out := new(WebsiteResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/CreateWebsite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) UpdateWebsite(ctx context.Context, in *UpdateWebsitePost, opts ...grpc.CallOption) (*WebsiteResponse, error) {
	out := new(WebsiteResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/UpdateWebsite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) ChangeWebsiteStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*WebsiteResponse, error) {
	out := new(WebsiteResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/ChangeWebsiteStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) WebsiteJob(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WebsiteJobResponse, error) {
	out := new(WebsiteJobResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/WebsiteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) WebsiteJobs(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*WebsiteJobsResponse, error) {
	out := new(WebsiteJobsResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/WebsiteJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) WebsiteJobPagination(ctx context.Context, in *SearchWebsiteJobPaginationPost, opts ...grpc.CallOption) (*WebsiteJobPaginationResponse, error) {
	out := new(WebsiteJobPaginationResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/WebsiteJobPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) CreateWebsiteJob(ctx context.Context, in *CreateWebsiteJobPost, opts ...grpc.CallOption) (*WebsiteJobResponse, error) {
	out := new(WebsiteJobResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/CreateWebsiteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) UpdateWebsiteJob(ctx context.Context, in *UpdateWebsiteJobPost, opts ...grpc.CallOption) (*WebsiteJobResponse, error) {
	out := new(WebsiteJobResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/UpdateWebsiteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) ChangeWebsiteJobStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*WebsiteJobResponse, error) {
	out := new(WebsiteJobResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/ChangeWebsiteJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) News(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*NewsResponse, error) {
	out := new(NewsResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/News", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) NewsPagination(ctx context.Context, in *SearchNewsPaginationPost, opts ...grpc.CallOption) (*NewsPaginationResponse, error) {
	out := new(NewsPaginationResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/NewsPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) ManualGrabNewsList(ctx context.Context, in *ManualGrabNewsListPost, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/external.ExternalService/ManualGrabNewsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) GrabNews(ctx context.Context, in *GrabNewsPost, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/external.ExternalService/GrabNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) TranslateNews(ctx context.Context, in *TranslateNewsPost, opts ...grpc.CallOption) (*NewsResponse, error) {
	out := new(NewsResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/TranslateNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) TranslateNewsContent(ctx context.Context, in *TranslateNewsContentPost, opts ...grpc.CallOption) (*NewsResponse, error) {
	out := new(NewsResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/TranslateNewsContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) UpdateNews(ctx context.Context, in *UpdateNewsPost, opts ...grpc.CallOption) (*NewsResponse, error) {
	out := new(NewsResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/UpdateNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) RemoveNews(ctx context.Context, in *RemoveNewsPost, opts ...grpc.CallOption) (*NewsResponse, error) {
	out := new(NewsResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/RemoveNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalServiceServer is the server API for ExternalService service.
// All implementations must embed UnimplementedExternalServiceServer
// for forward compatibility
type ExternalServiceServer interface {
	// 外网站点信息
	Website(context.Context, *InfoPost) (*WebsiteResponse, error)
	Websites(context.Context, *EmptyPost) (*WebsitesResponse, error)
	WebsitePagination(context.Context, *SearchPaginationPost) (*WebsitePaginationResponse, error)
	CreateWebsite(context.Context, *CreateWebsitePost) (*WebsiteResponse, error)
	UpdateWebsite(context.Context, *UpdateWebsitePost) (*WebsiteResponse, error)
	ChangeWebsiteStatus(context.Context, *ChangeStatusPost) (*WebsiteResponse, error)
	// 外网站点 抓取任务
	WebsiteJob(context.Context, *InfoPost) (*WebsiteJobResponse, error)
	WebsiteJobs(context.Context, *EmptyPost) (*WebsiteJobsResponse, error)
	WebsiteJobPagination(context.Context, *SearchWebsiteJobPaginationPost) (*WebsiteJobPaginationResponse, error)
	CreateWebsiteJob(context.Context, *CreateWebsiteJobPost) (*WebsiteJobResponse, error)
	UpdateWebsiteJob(context.Context, *UpdateWebsiteJobPost) (*WebsiteJobResponse, error)
	ChangeWebsiteJobStatus(context.Context, *ChangeStatusPost) (*WebsiteJobResponse, error)
	// 抓取新闻
	News(context.Context, *InfoPost) (*NewsResponse, error)
	NewsPagination(context.Context, *SearchNewsPaginationPost) (*NewsPaginationResponse, error)
	ManualGrabNewsList(context.Context, *ManualGrabNewsListPost) (*Response, error)
	GrabNews(context.Context, *GrabNewsPost) (*Response, error)
	TranslateNews(context.Context, *TranslateNewsPost) (*NewsResponse, error)
	TranslateNewsContent(context.Context, *TranslateNewsContentPost) (*NewsResponse, error)
	UpdateNews(context.Context, *UpdateNewsPost) (*NewsResponse, error)
	RemoveNews(context.Context, *RemoveNewsPost) (*NewsResponse, error)
	mustEmbedUnimplementedExternalServiceServer()
}

// UnimplementedExternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExternalServiceServer struct {
}

func (UnimplementedExternalServiceServer) Website(context.Context, *InfoPost) (*WebsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Website not implemented")
}
func (UnimplementedExternalServiceServer) Websites(context.Context, *EmptyPost) (*WebsitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Websites not implemented")
}
func (UnimplementedExternalServiceServer) WebsitePagination(context.Context, *SearchPaginationPost) (*WebsitePaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsitePagination not implemented")
}
func (UnimplementedExternalServiceServer) CreateWebsite(context.Context, *CreateWebsitePost) (*WebsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebsite not implemented")
}
func (UnimplementedExternalServiceServer) UpdateWebsite(context.Context, *UpdateWebsitePost) (*WebsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebsite not implemented")
}
func (UnimplementedExternalServiceServer) ChangeWebsiteStatus(context.Context, *ChangeStatusPost) (*WebsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWebsiteStatus not implemented")
}
func (UnimplementedExternalServiceServer) WebsiteJob(context.Context, *InfoPost) (*WebsiteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteJob not implemented")
}
func (UnimplementedExternalServiceServer) WebsiteJobs(context.Context, *EmptyPost) (*WebsiteJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteJobs not implemented")
}
func (UnimplementedExternalServiceServer) WebsiteJobPagination(context.Context, *SearchWebsiteJobPaginationPost) (*WebsiteJobPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteJobPagination not implemented")
}
func (UnimplementedExternalServiceServer) CreateWebsiteJob(context.Context, *CreateWebsiteJobPost) (*WebsiteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebsiteJob not implemented")
}
func (UnimplementedExternalServiceServer) UpdateWebsiteJob(context.Context, *UpdateWebsiteJobPost) (*WebsiteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebsiteJob not implemented")
}
func (UnimplementedExternalServiceServer) ChangeWebsiteJobStatus(context.Context, *ChangeStatusPost) (*WebsiteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWebsiteJobStatus not implemented")
}
func (UnimplementedExternalServiceServer) News(context.Context, *InfoPost) (*NewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method News not implemented")
}
func (UnimplementedExternalServiceServer) NewsPagination(context.Context, *SearchNewsPaginationPost) (*NewsPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewsPagination not implemented")
}
func (UnimplementedExternalServiceServer) ManualGrabNewsList(context.Context, *ManualGrabNewsListPost) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualGrabNewsList not implemented")
}
func (UnimplementedExternalServiceServer) GrabNews(context.Context, *GrabNewsPost) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrabNews not implemented")
}
func (UnimplementedExternalServiceServer) TranslateNews(context.Context, *TranslateNewsPost) (*NewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateNews not implemented")
}
func (UnimplementedExternalServiceServer) TranslateNewsContent(context.Context, *TranslateNewsContentPost) (*NewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateNewsContent not implemented")
}
func (UnimplementedExternalServiceServer) UpdateNews(context.Context, *UpdateNewsPost) (*NewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNews not implemented")
}
func (UnimplementedExternalServiceServer) RemoveNews(context.Context, *RemoveNewsPost) (*NewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNews not implemented")
}
func (UnimplementedExternalServiceServer) mustEmbedUnimplementedExternalServiceServer() {}

// UnsafeExternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalServiceServer will
// result in compilation errors.
type UnsafeExternalServiceServer interface {
	mustEmbedUnimplementedExternalServiceServer()
}

func RegisterExternalServiceServer(s grpc.ServiceRegistrar, srv ExternalServiceServer) {
	s.RegisterService(&ExternalService_ServiceDesc, srv)
}

func _ExternalService_Website_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).Website(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/Website",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).Website(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_Websites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).Websites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/Websites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).Websites(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_WebsitePagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).WebsitePagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/WebsitePagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).WebsitePagination(ctx, req.(*SearchPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_CreateWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebsitePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).CreateWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/CreateWebsite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).CreateWebsite(ctx, req.(*CreateWebsitePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_UpdateWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebsitePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).UpdateWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/UpdateWebsite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).UpdateWebsite(ctx, req.(*UpdateWebsitePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_ChangeWebsiteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).ChangeWebsiteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/ChangeWebsiteStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).ChangeWebsiteStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_WebsiteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).WebsiteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/WebsiteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).WebsiteJob(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_WebsiteJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).WebsiteJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/WebsiteJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).WebsiteJobs(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_WebsiteJobPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWebsiteJobPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).WebsiteJobPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/WebsiteJobPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).WebsiteJobPagination(ctx, req.(*SearchWebsiteJobPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_CreateWebsiteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebsiteJobPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).CreateWebsiteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/CreateWebsiteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).CreateWebsiteJob(ctx, req.(*CreateWebsiteJobPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_UpdateWebsiteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebsiteJobPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).UpdateWebsiteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/UpdateWebsiteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).UpdateWebsiteJob(ctx, req.(*UpdateWebsiteJobPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_ChangeWebsiteJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).ChangeWebsiteJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/ChangeWebsiteJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).ChangeWebsiteJobStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_News_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).News(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/News",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).News(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_NewsPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNewsPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).NewsPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/NewsPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).NewsPagination(ctx, req.(*SearchNewsPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_ManualGrabNewsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualGrabNewsListPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).ManualGrabNewsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/ManualGrabNewsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).ManualGrabNewsList(ctx, req.(*ManualGrabNewsListPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_GrabNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrabNewsPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).GrabNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/GrabNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).GrabNews(ctx, req.(*GrabNewsPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_TranslateNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateNewsPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).TranslateNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/TranslateNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).TranslateNews(ctx, req.(*TranslateNewsPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_TranslateNewsContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateNewsContentPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).TranslateNewsContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/TranslateNewsContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).TranslateNewsContent(ctx, req.(*TranslateNewsContentPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_UpdateNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewsPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).UpdateNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/UpdateNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).UpdateNews(ctx, req.(*UpdateNewsPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_RemoveNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNewsPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).RemoveNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/RemoveNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).RemoveNews(ctx, req.(*RemoveNewsPost))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalService_ServiceDesc is the grpc.ServiceDesc for ExternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "external.ExternalService",
	HandlerType: (*ExternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Website",
			Handler:    _ExternalService_Website_Handler,
		},
		{
			MethodName: "Websites",
			Handler:    _ExternalService_Websites_Handler,
		},
		{
			MethodName: "WebsitePagination",
			Handler:    _ExternalService_WebsitePagination_Handler,
		},
		{
			MethodName: "CreateWebsite",
			Handler:    _ExternalService_CreateWebsite_Handler,
		},
		{
			MethodName: "UpdateWebsite",
			Handler:    _ExternalService_UpdateWebsite_Handler,
		},
		{
			MethodName: "ChangeWebsiteStatus",
			Handler:    _ExternalService_ChangeWebsiteStatus_Handler,
		},
		{
			MethodName: "WebsiteJob",
			Handler:    _ExternalService_WebsiteJob_Handler,
		},
		{
			MethodName: "WebsiteJobs",
			Handler:    _ExternalService_WebsiteJobs_Handler,
		},
		{
			MethodName: "WebsiteJobPagination",
			Handler:    _ExternalService_WebsiteJobPagination_Handler,
		},
		{
			MethodName: "CreateWebsiteJob",
			Handler:    _ExternalService_CreateWebsiteJob_Handler,
		},
		{
			MethodName: "UpdateWebsiteJob",
			Handler:    _ExternalService_UpdateWebsiteJob_Handler,
		},
		{
			MethodName: "ChangeWebsiteJobStatus",
			Handler:    _ExternalService_ChangeWebsiteJobStatus_Handler,
		},
		{
			MethodName: "News",
			Handler:    _ExternalService_News_Handler,
		},
		{
			MethodName: "NewsPagination",
			Handler:    _ExternalService_NewsPagination_Handler,
		},
		{
			MethodName: "ManualGrabNewsList",
			Handler:    _ExternalService_ManualGrabNewsList_Handler,
		},
		{
			MethodName: "GrabNews",
			Handler:    _ExternalService_GrabNews_Handler,
		},
		{
			MethodName: "TranslateNews",
			Handler:    _ExternalService_TranslateNews_Handler,
		},
		{
			MethodName: "TranslateNewsContent",
			Handler:    _ExternalService_TranslateNewsContent_Handler,
		},
		{
			MethodName: "UpdateNews",
			Handler:    _ExternalService_UpdateNews_Handler,
		},
		{
			MethodName: "RemoveNews",
			Handler:    _ExternalService_RemoveNews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/external.proto",
}
