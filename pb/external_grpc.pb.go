// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalServiceClient is the client API for ExternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalServiceClient interface {
	Website(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WebsiteResponse, error)
	Websites(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*WebsitesResponse, error)
	TagPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*WebsitePaginationResponse, error)
	CreateWebsite(ctx context.Context, in *CreateWebsitePost, opts ...grpc.CallOption) (*WebsiteResponse, error)
	UpdateWebsite(ctx context.Context, in *UpdateWebsitePost, opts ...grpc.CallOption) (*WebsiteResponse, error)
	ChangeWebsiteStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*WebsiteResponse, error)
}

type externalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalServiceClient(cc grpc.ClientConnInterface) ExternalServiceClient {
	return &externalServiceClient{cc}
}

func (c *externalServiceClient) Website(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*WebsiteResponse, error) {
	out := new(WebsiteResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/Website", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) Websites(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*WebsitesResponse, error) {
	out := new(WebsitesResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/Websites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) TagPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*WebsitePaginationResponse, error) {
	out := new(WebsitePaginationResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/TagPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) CreateWebsite(ctx context.Context, in *CreateWebsitePost, opts ...grpc.CallOption) (*WebsiteResponse, error) {
	out := new(WebsiteResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/CreateWebsite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) UpdateWebsite(ctx context.Context, in *UpdateWebsitePost, opts ...grpc.CallOption) (*WebsiteResponse, error) {
	out := new(WebsiteResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/UpdateWebsite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServiceClient) ChangeWebsiteStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*WebsiteResponse, error) {
	out := new(WebsiteResponse)
	err := c.cc.Invoke(ctx, "/external.ExternalService/ChangeWebsiteStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalServiceServer is the server API for ExternalService service.
// All implementations must embed UnimplementedExternalServiceServer
// for forward compatibility
type ExternalServiceServer interface {
	Website(context.Context, *InfoPost) (*WebsiteResponse, error)
	Websites(context.Context, *EmptyPost) (*WebsitesResponse, error)
	TagPagination(context.Context, *PaginationPost) (*WebsitePaginationResponse, error)
	CreateWebsite(context.Context, *CreateWebsitePost) (*WebsiteResponse, error)
	UpdateWebsite(context.Context, *UpdateWebsitePost) (*WebsiteResponse, error)
	ChangeWebsiteStatus(context.Context, *ChangeStatusPost) (*WebsiteResponse, error)
	mustEmbedUnimplementedExternalServiceServer()
}

// UnimplementedExternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExternalServiceServer struct {
}

func (UnimplementedExternalServiceServer) Website(context.Context, *InfoPost) (*WebsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Website not implemented")
}
func (UnimplementedExternalServiceServer) Websites(context.Context, *EmptyPost) (*WebsitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Websites not implemented")
}
func (UnimplementedExternalServiceServer) TagPagination(context.Context, *PaginationPost) (*WebsitePaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagPagination not implemented")
}
func (UnimplementedExternalServiceServer) CreateWebsite(context.Context, *CreateWebsitePost) (*WebsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebsite not implemented")
}
func (UnimplementedExternalServiceServer) UpdateWebsite(context.Context, *UpdateWebsitePost) (*WebsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebsite not implemented")
}
func (UnimplementedExternalServiceServer) ChangeWebsiteStatus(context.Context, *ChangeStatusPost) (*WebsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWebsiteStatus not implemented")
}
func (UnimplementedExternalServiceServer) mustEmbedUnimplementedExternalServiceServer() {}

// UnsafeExternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalServiceServer will
// result in compilation errors.
type UnsafeExternalServiceServer interface {
	mustEmbedUnimplementedExternalServiceServer()
}

func RegisterExternalServiceServer(s grpc.ServiceRegistrar, srv ExternalServiceServer) {
	s.RegisterService(&ExternalService_ServiceDesc, srv)
}

func _ExternalService_Website_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).Website(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/Website",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).Website(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_Websites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).Websites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/Websites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).Websites(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_TagPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).TagPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/TagPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).TagPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_CreateWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebsitePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).CreateWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/CreateWebsite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).CreateWebsite(ctx, req.(*CreateWebsitePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_UpdateWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebsitePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).UpdateWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/UpdateWebsite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).UpdateWebsite(ctx, req.(*UpdateWebsitePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalService_ChangeWebsiteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServiceServer).ChangeWebsiteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/external.ExternalService/ChangeWebsiteStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServiceServer).ChangeWebsiteStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalService_ServiceDesc is the grpc.ServiceDesc for ExternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "external.ExternalService",
	HandlerType: (*ExternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Website",
			Handler:    _ExternalService_Website_Handler,
		},
		{
			MethodName: "Websites",
			Handler:    _ExternalService_Websites_Handler,
		},
		{
			MethodName: "TagPagination",
			Handler:    _ExternalService_TagPagination_Handler,
		},
		{
			MethodName: "CreateWebsite",
			Handler:    _ExternalService_CreateWebsite_Handler,
		},
		{
			MethodName: "UpdateWebsite",
			Handler:    _ExternalService_UpdateWebsite_Handler,
		},
		{
			MethodName: "ChangeWebsiteStatus",
			Handler:    _ExternalService_ChangeWebsiteStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/external.proto",
}
