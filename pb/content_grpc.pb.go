// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	// 标签管理
	Tag(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*TagResponse, error)
	Tags(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*TagsResponse, error)
	TagPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*TagPaginationResponse, error)
	CreateTag(ctx context.Context, in *CreateTagPost, opts ...grpc.CallOption) (*TagResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagPost, opts ...grpc.CallOption) (*TagResponse, error)
	ChangeTagStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*TagResponse, error)
	// 文章管理
	Article(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ArticleInfoResponse, error)
	ArticlePagination(ctx context.Context, in *ArticlePaginationPost, opts ...grpc.CallOption) (*ArticlePaginationResponse, error)
	CreateArticle(ctx context.Context, in *CreateArticlePost, opts ...grpc.CallOption) (*ArticleResponse, error)
	UpdateArticle(ctx context.Context, in *UpdateArticlePost, opts ...grpc.CallOption) (*ArticleResponse, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) Tag(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/content.ContentService/Tag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Tags(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*TagsResponse, error) {
	out := new(TagsResponse)
	err := c.cc.Invoke(ctx, "/content.ContentService/Tags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) TagPagination(ctx context.Context, in *PaginationPost, opts ...grpc.CallOption) (*TagPaginationResponse, error) {
	out := new(TagPaginationResponse)
	err := c.cc.Invoke(ctx, "/content.ContentService/TagPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateTag(ctx context.Context, in *CreateTagPost, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/content.ContentService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpdateTag(ctx context.Context, in *UpdateTagPost, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/content.ContentService/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ChangeTagStatus(ctx context.Context, in *ChangeStatusPost, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/content.ContentService/ChangeTagStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Article(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ArticleInfoResponse, error) {
	out := new(ArticleInfoResponse)
	err := c.cc.Invoke(ctx, "/content.ContentService/Article", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ArticlePagination(ctx context.Context, in *ArticlePaginationPost, opts ...grpc.CallOption) (*ArticlePaginationResponse, error) {
	out := new(ArticlePaginationResponse)
	err := c.cc.Invoke(ctx, "/content.ContentService/ArticlePagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateArticle(ctx context.Context, in *CreateArticlePost, opts ...grpc.CallOption) (*ArticleResponse, error) {
	out := new(ArticleResponse)
	err := c.cc.Invoke(ctx, "/content.ContentService/CreateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpdateArticle(ctx context.Context, in *UpdateArticlePost, opts ...grpc.CallOption) (*ArticleResponse, error) {
	out := new(ArticleResponse)
	err := c.cc.Invoke(ctx, "/content.ContentService/UpdateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	// 标签管理
	Tag(context.Context, *InfoPost) (*TagResponse, error)
	Tags(context.Context, *EmptyPost) (*TagsResponse, error)
	TagPagination(context.Context, *PaginationPost) (*TagPaginationResponse, error)
	CreateTag(context.Context, *CreateTagPost) (*TagResponse, error)
	UpdateTag(context.Context, *UpdateTagPost) (*TagResponse, error)
	ChangeTagStatus(context.Context, *ChangeStatusPost) (*TagResponse, error)
	// 文章管理
	Article(context.Context, *InfoPost) (*ArticleInfoResponse, error)
	ArticlePagination(context.Context, *ArticlePaginationPost) (*ArticlePaginationResponse, error)
	CreateArticle(context.Context, *CreateArticlePost) (*ArticleResponse, error)
	UpdateArticle(context.Context, *UpdateArticlePost) (*ArticleResponse, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) Tag(context.Context, *InfoPost) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tag not implemented")
}
func (UnimplementedContentServiceServer) Tags(context.Context, *EmptyPost) (*TagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tags not implemented")
}
func (UnimplementedContentServiceServer) TagPagination(context.Context, *PaginationPost) (*TagPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagPagination not implemented")
}
func (UnimplementedContentServiceServer) CreateTag(context.Context, *CreateTagPost) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedContentServiceServer) UpdateTag(context.Context, *UpdateTagPost) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedContentServiceServer) ChangeTagStatus(context.Context, *ChangeStatusPost) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTagStatus not implemented")
}
func (UnimplementedContentServiceServer) Article(context.Context, *InfoPost) (*ArticleInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Article not implemented")
}
func (UnimplementedContentServiceServer) ArticlePagination(context.Context, *ArticlePaginationPost) (*ArticlePaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticlePagination not implemented")
}
func (UnimplementedContentServiceServer) CreateArticle(context.Context, *CreateArticlePost) (*ArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedContentServiceServer) UpdateArticle(context.Context, *UpdateArticlePost) (*ArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentService/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Tag(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Tags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Tags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentService/Tags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Tags(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_TagPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).TagPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentService/TagPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).TagPagination(ctx, req.(*PaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateTag(ctx, req.(*CreateTagPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentService/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpdateTag(ctx, req.(*UpdateTagPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ChangeTagStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ChangeTagStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentService/ChangeTagStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ChangeTagStatus(ctx, req.(*ChangeStatusPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Article_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Article(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentService/Article",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Article(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ArticlePagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticlePaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ArticlePagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentService/ArticlePagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ArticlePagination(ctx, req.(*ArticlePaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticlePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentService/CreateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateArticle(ctx, req.(*CreateArticlePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticlePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentService/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpdateArticle(ctx, req.(*UpdateArticlePost))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tag",
			Handler:    _ContentService_Tag_Handler,
		},
		{
			MethodName: "Tags",
			Handler:    _ContentService_Tags_Handler,
		},
		{
			MethodName: "TagPagination",
			Handler:    _ContentService_TagPagination_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _ContentService_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ContentService_UpdateTag_Handler,
		},
		{
			MethodName: "ChangeTagStatus",
			Handler:    _ContentService_ChangeTagStatus_Handler,
		},
		{
			MethodName: "Article",
			Handler:    _ContentService_Article_Handler,
		},
		{
			MethodName: "ArticlePagination",
			Handler:    _ContentService_ArticlePagination_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _ContentService_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ContentService_UpdateArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content/content.proto",
}
