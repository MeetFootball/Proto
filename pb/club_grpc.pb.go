// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClubServiceClient is the client API for ClubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubServiceClient interface {
	// Fan
	NewFan(ctx context.Context, in *NewFanPost, opts ...grpc.CallOption) (*BoolResponse, error)
	Me(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MeResponse, error)
	Fan(ctx context.Context, in *KeyPost, opts ...grpc.CallOption) (*FanResponse, error)
	ChangeNickname(ctx context.Context, in *ChangeFanNicknamePost, opts ...grpc.CallOption) (*BoolResponse, error)
	ChangeAccount(ctx context.Context, in *ChangeFanAccountPost, opts ...grpc.CallOption) (*BoolResponse, error)
	UpdateFanArea(ctx context.Context, in *UpdateAreaPost, opts ...grpc.CallOption) (*BoolResponse, error)
	// Club
	Club(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*FanClubResponse, error)
	MyFanClub(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*FanClubResponse, error)
	Pagination(ctx context.Context, in *FanClubPaginationPost, opts ...grpc.CallOption) (*FanClubPaginationResponse, error)
	Create(ctx context.Context, in *CreateFanClubPost, opts ...grpc.CallOption) (*FanClubResponse, error)
	Transfer(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BoolResponse, error)
	UpdateClubArea(ctx context.Context, in *UpdateAreaPost, opts ...grpc.CallOption) (*BoolResponse, error)
	// Invite
	Invite(ctx context.Context, in *InviteFanPost, opts ...grpc.CallOption) (*BoolResponse, error)
	CancelInvite(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error)
	AcceptInvite(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error)
	RejectInvite(ctx context.Context, in *RejectInvitePost, opts ...grpc.CallOption) (*BoolResponse, error)
	// Join
	Join(ctx context.Context, in *JoinFanClubPost, opts ...grpc.CallOption) (*BoolResponse, error)
	CancelJoin(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error)
	AgreeJoin(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error)
	RejectJoin(ctx context.Context, in *JoinFanClubPost, opts ...grpc.CallOption) (*BoolResponse, error)
	// Leave
	Leave(ctx context.Context, in *LeaveFanClubPost, opts ...grpc.CallOption) (*BoolResponse, error)
	KickOut(ctx context.Context, in *KickOutPost, opts ...grpc.CallOption) (*BoolResponse, error)
}

type clubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClubServiceClient(cc grpc.ClientConnInterface) ClubServiceClient {
	return &clubServiceClient{cc}
}

func (c *clubServiceClient) NewFan(ctx context.Context, in *NewFanPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/NewFan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) Me(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*MeResponse, error) {
	out := new(MeResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/Me", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) Fan(ctx context.Context, in *KeyPost, opts ...grpc.CallOption) (*FanResponse, error) {
	out := new(FanResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/Fan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) ChangeNickname(ctx context.Context, in *ChangeFanNicknamePost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/ChangeNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) ChangeAccount(ctx context.Context, in *ChangeFanAccountPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/ChangeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) UpdateFanArea(ctx context.Context, in *UpdateAreaPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/UpdateFanArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) Club(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*FanClubResponse, error) {
	out := new(FanClubResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/Club", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) MyFanClub(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*FanClubResponse, error) {
	out := new(FanClubResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/MyFanClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) Pagination(ctx context.Context, in *FanClubPaginationPost, opts ...grpc.CallOption) (*FanClubPaginationResponse, error) {
	out := new(FanClubPaginationResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/Pagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) Create(ctx context.Context, in *CreateFanClubPost, opts ...grpc.CallOption) (*FanClubResponse, error) {
	out := new(FanClubResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) Transfer(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) UpdateClubArea(ctx context.Context, in *UpdateAreaPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/UpdateClubArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) Invite(ctx context.Context, in *InviteFanPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/Invite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) CancelInvite(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/CancelInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) AcceptInvite(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/AcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) RejectInvite(ctx context.Context, in *RejectInvitePost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/RejectInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) Join(ctx context.Context, in *JoinFanClubPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) CancelJoin(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/CancelJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) AgreeJoin(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/AgreeJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) RejectJoin(ctx context.Context, in *JoinFanClubPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/RejectJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) Leave(ctx context.Context, in *LeaveFanClubPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubServiceClient) KickOut(ctx context.Context, in *KickOutPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/club.ClubService/KickOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubServiceServer is the server API for ClubService service.
// All implementations must embed UnimplementedClubServiceServer
// for forward compatibility
type ClubServiceServer interface {
	// Fan
	NewFan(context.Context, *NewFanPost) (*BoolResponse, error)
	Me(context.Context, *EmptyPost) (*MeResponse, error)
	Fan(context.Context, *KeyPost) (*FanResponse, error)
	ChangeNickname(context.Context, *ChangeFanNicknamePost) (*BoolResponse, error)
	ChangeAccount(context.Context, *ChangeFanAccountPost) (*BoolResponse, error)
	UpdateFanArea(context.Context, *UpdateAreaPost) (*BoolResponse, error)
	// Club
	Club(context.Context, *InfoPost) (*FanClubResponse, error)
	MyFanClub(context.Context, *EmptyPost) (*FanClubResponse, error)
	Pagination(context.Context, *FanClubPaginationPost) (*FanClubPaginationResponse, error)
	Create(context.Context, *CreateFanClubPost) (*FanClubResponse, error)
	Transfer(context.Context, *EmptyPost) (*BoolResponse, error)
	UpdateClubArea(context.Context, *UpdateAreaPost) (*BoolResponse, error)
	// Invite
	Invite(context.Context, *InviteFanPost) (*BoolResponse, error)
	CancelInvite(context.Context, *InfoPost) (*BoolResponse, error)
	AcceptInvite(context.Context, *InfoPost) (*BoolResponse, error)
	RejectInvite(context.Context, *RejectInvitePost) (*BoolResponse, error)
	// Join
	Join(context.Context, *JoinFanClubPost) (*BoolResponse, error)
	CancelJoin(context.Context, *InfoPost) (*BoolResponse, error)
	AgreeJoin(context.Context, *InfoPost) (*BoolResponse, error)
	RejectJoin(context.Context, *JoinFanClubPost) (*BoolResponse, error)
	// Leave
	Leave(context.Context, *LeaveFanClubPost) (*BoolResponse, error)
	KickOut(context.Context, *KickOutPost) (*BoolResponse, error)
	mustEmbedUnimplementedClubServiceServer()
}

// UnimplementedClubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClubServiceServer struct {
}

func (UnimplementedClubServiceServer) NewFan(context.Context, *NewFanPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFan not implemented")
}
func (UnimplementedClubServiceServer) Me(context.Context, *EmptyPost) (*MeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (UnimplementedClubServiceServer) Fan(context.Context, *KeyPost) (*FanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fan not implemented")
}
func (UnimplementedClubServiceServer) ChangeNickname(context.Context, *ChangeFanNicknamePost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNickname not implemented")
}
func (UnimplementedClubServiceServer) ChangeAccount(context.Context, *ChangeFanAccountPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccount not implemented")
}
func (UnimplementedClubServiceServer) UpdateFanArea(context.Context, *UpdateAreaPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFanArea not implemented")
}
func (UnimplementedClubServiceServer) Club(context.Context, *InfoPost) (*FanClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Club not implemented")
}
func (UnimplementedClubServiceServer) MyFanClub(context.Context, *EmptyPost) (*FanClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyFanClub not implemented")
}
func (UnimplementedClubServiceServer) Pagination(context.Context, *FanClubPaginationPost) (*FanClubPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pagination not implemented")
}
func (UnimplementedClubServiceServer) Create(context.Context, *CreateFanClubPost) (*FanClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedClubServiceServer) Transfer(context.Context, *EmptyPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedClubServiceServer) UpdateClubArea(context.Context, *UpdateAreaPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClubArea not implemented")
}
func (UnimplementedClubServiceServer) Invite(context.Context, *InviteFanPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (UnimplementedClubServiceServer) CancelInvite(context.Context, *InfoPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInvite not implemented")
}
func (UnimplementedClubServiceServer) AcceptInvite(context.Context, *InfoPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (UnimplementedClubServiceServer) RejectInvite(context.Context, *RejectInvitePost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectInvite not implemented")
}
func (UnimplementedClubServiceServer) Join(context.Context, *JoinFanClubPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedClubServiceServer) CancelJoin(context.Context, *InfoPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJoin not implemented")
}
func (UnimplementedClubServiceServer) AgreeJoin(context.Context, *InfoPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeJoin not implemented")
}
func (UnimplementedClubServiceServer) RejectJoin(context.Context, *JoinFanClubPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectJoin not implemented")
}
func (UnimplementedClubServiceServer) Leave(context.Context, *LeaveFanClubPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedClubServiceServer) KickOut(context.Context, *KickOutPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickOut not implemented")
}
func (UnimplementedClubServiceServer) mustEmbedUnimplementedClubServiceServer() {}

// UnsafeClubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubServiceServer will
// result in compilation errors.
type UnsafeClubServiceServer interface {
	mustEmbedUnimplementedClubServiceServer()
}

func RegisterClubServiceServer(s grpc.ServiceRegistrar, srv ClubServiceServer) {
	s.RegisterService(&ClubService_ServiceDesc, srv)
}

func _ClubService_NewFan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFanPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).NewFan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/NewFan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).NewFan(ctx, req.(*NewFanPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/Me",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).Me(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_Fan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).Fan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/Fan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).Fan(ctx, req.(*KeyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_ChangeNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeFanNicknamePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).ChangeNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/ChangeNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).ChangeNickname(ctx, req.(*ChangeFanNicknamePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_ChangeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeFanAccountPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).ChangeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/ChangeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).ChangeAccount(ctx, req.(*ChangeFanAccountPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_UpdateFanArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAreaPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).UpdateFanArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/UpdateFanArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).UpdateFanArea(ctx, req.(*UpdateAreaPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_Club_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).Club(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/Club",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).Club(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_MyFanClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).MyFanClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/MyFanClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).MyFanClub(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_Pagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FanClubPaginationPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).Pagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/Pagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).Pagination(ctx, req.(*FanClubPaginationPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFanClubPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).Create(ctx, req.(*CreateFanClubPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).Transfer(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_UpdateClubArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAreaPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).UpdateClubArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/UpdateClubArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).UpdateClubArea(ctx, req.(*UpdateAreaPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteFanPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).Invite(ctx, req.(*InviteFanPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_CancelInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).CancelInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/CancelInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).CancelInvite(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/AcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).AcceptInvite(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_RejectInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectInvitePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).RejectInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/RejectInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).RejectInvite(ctx, req.(*RejectInvitePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinFanClubPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).Join(ctx, req.(*JoinFanClubPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_CancelJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).CancelJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/CancelJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).CancelJoin(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_AgreeJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).AgreeJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/AgreeJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).AgreeJoin(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_RejectJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinFanClubPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).RejectJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/RejectJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).RejectJoin(ctx, req.(*JoinFanClubPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveFanClubPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).Leave(ctx, req.(*LeaveFanClubPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubService_KickOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickOutPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServiceServer).KickOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubService/KickOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServiceServer).KickOut(ctx, req.(*KickOutPost))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubService_ServiceDesc is the grpc.ServiceDesc for ClubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "club.ClubService",
	HandlerType: (*ClubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewFan",
			Handler:    _ClubService_NewFan_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _ClubService_Me_Handler,
		},
		{
			MethodName: "Fan",
			Handler:    _ClubService_Fan_Handler,
		},
		{
			MethodName: "ChangeNickname",
			Handler:    _ClubService_ChangeNickname_Handler,
		},
		{
			MethodName: "ChangeAccount",
			Handler:    _ClubService_ChangeAccount_Handler,
		},
		{
			MethodName: "UpdateFanArea",
			Handler:    _ClubService_UpdateFanArea_Handler,
		},
		{
			MethodName: "Club",
			Handler:    _ClubService_Club_Handler,
		},
		{
			MethodName: "MyFanClub",
			Handler:    _ClubService_MyFanClub_Handler,
		},
		{
			MethodName: "Pagination",
			Handler:    _ClubService_Pagination_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ClubService_Create_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _ClubService_Transfer_Handler,
		},
		{
			MethodName: "UpdateClubArea",
			Handler:    _ClubService_UpdateClubArea_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _ClubService_Invite_Handler,
		},
		{
			MethodName: "CancelInvite",
			Handler:    _ClubService_CancelInvite_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _ClubService_AcceptInvite_Handler,
		},
		{
			MethodName: "RejectInvite",
			Handler:    _ClubService_RejectInvite_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _ClubService_Join_Handler,
		},
		{
			MethodName: "CancelJoin",
			Handler:    _ClubService_CancelJoin_Handler,
		},
		{
			MethodName: "AgreeJoin",
			Handler:    _ClubService_AgreeJoin_Handler,
		},
		{
			MethodName: "RejectJoin",
			Handler:    _ClubService_RejectJoin_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _ClubService_Leave_Handler,
		},
		{
			MethodName: "KickOut",
			Handler:    _ClubService_KickOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "club/club.proto",
}
