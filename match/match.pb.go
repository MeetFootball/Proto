// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: match/match.proto

package match

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("match/match.proto", fileDescriptor_3c810023c7292e43) }

var fileDescriptor_3c810023c7292e43 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x4d, 0x2c, 0x49,
	0xce, 0xd0, 0x07, 0x93, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60, 0x8e, 0x94, 0x10,
	0x44, 0x26, 0x3d, 0x27, 0x3f, 0x29, 0x31, 0x07, 0x22, 0x05, 0x13, 0xcb, 0x49, 0x4d, 0x4c, 0x2f,
	0x4d, 0x85, 0x8a, 0x09, 0x40, 0xc4, 0x92, 0x73, 0x4a, 0x93, 0x20, 0x22, 0x46, 0x1f, 0x18, 0xb9,
	0x78, 0x7c, 0x41, 0x82, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x96, 0x5c, 0x9c, 0x3e,
	0x60, 0x2d, 0xc5, 0xa9, 0xc5, 0x42, 0x02, 0x7a, 0x10, 0xcb, 0x5c, 0x73, 0x0b, 0x4a, 0x2a, 0x03,
	0xf2, 0x8b, 0x4b, 0xa4, 0x24, 0xa0, 0x22, 0x70, 0x35, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5,
	0xa9, 0x4a, 0x0c, 0x42, 0xb6, 0x5c, 0xdc, 0x50, 0xe1, 0x90, 0xa2, 0xd4, 0x54, 0x2c, 0x9a, 0xa5,
	0x50, 0x35, 0x83, 0x54, 0x21, 0x69, 0xd7, 0xe3, 0x62, 0x71, 0xce, 0x29, 0x4d, 0x12, 0xe2, 0x87,
	0xaa, 0xf2, 0xcc, 0x4b, 0xcb, 0x07, 0x6b, 0x13, 0x86, 0x0a, 0x80, 0x64, 0x91, 0xd4, 0x9b, 0x71,
	0xf1, 0x40, 0x0d, 0x02, 0x49, 0x14, 0xe3, 0xd6, 0xe7, 0x94, 0x9f, 0x9f, 0x83, 0xd0, 0xe7, 0xc4,
	0x1f, 0xc5, 0xab, 0x07, 0x09, 0x44, 0x6b, 0x30, 0x99, 0xc4, 0x06, 0x0e, 0x0a, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x6f, 0x31, 0x86, 0xb5, 0x60, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MatchServiceClient is the client API for MatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MatchServiceClient interface {
	// 联赛
	Leagueses(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*LeaguesesResponse, error)
	LeaguesTree(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*LeaguesTreeResponse, error)
	// 俱乐部
	Club(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ClubResponse, error)
	LeaguesClubs(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error)
}

type matchServiceClient struct {
	cc *grpc.ClientConn
}

func NewMatchServiceClient(cc *grpc.ClientConn) MatchServiceClient {
	return &matchServiceClient{cc}
}

func (c *matchServiceClient) Leagueses(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*LeaguesesResponse, error) {
	out := new(LeaguesesResponse)
	err := c.cc.Invoke(ctx, "/match.MatchService/Leagueses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) LeaguesTree(ctx context.Context, in *EmptyPost, opts ...grpc.CallOption) (*LeaguesTreeResponse, error) {
	out := new(LeaguesTreeResponse)
	err := c.cc.Invoke(ctx, "/match.MatchService/LeaguesTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) Club(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*ClubResponse, error) {
	out := new(ClubResponse)
	err := c.cc.Invoke(ctx, "/match.MatchService/Club", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) LeaguesClubs(ctx context.Context, in *InfoPost, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/match.MatchService/LeaguesClubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServiceServer is the server API for MatchService service.
type MatchServiceServer interface {
	// 联赛
	Leagueses(context.Context, *EmptyPost) (*LeaguesesResponse, error)
	LeaguesTree(context.Context, *EmptyPost) (*LeaguesTreeResponse, error)
	// 俱乐部
	Club(context.Context, *InfoPost) (*ClubResponse, error)
	LeaguesClubs(context.Context, *InfoPost) (*BoolResponse, error)
}

// UnimplementedMatchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMatchServiceServer struct {
}

func (*UnimplementedMatchServiceServer) Leagueses(ctx context.Context, req *EmptyPost) (*LeaguesesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leagueses not implemented")
}
func (*UnimplementedMatchServiceServer) LeaguesTree(ctx context.Context, req *EmptyPost) (*LeaguesTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaguesTree not implemented")
}
func (*UnimplementedMatchServiceServer) Club(ctx context.Context, req *InfoPost) (*ClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Club not implemented")
}
func (*UnimplementedMatchServiceServer) LeaguesClubs(ctx context.Context, req *InfoPost) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaguesClubs not implemented")
}

func RegisterMatchServiceServer(s *grpc.Server, srv MatchServiceServer) {
	s.RegisterService(&_MatchService_serviceDesc, srv)
}

func _MatchService_Leagueses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).Leagueses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.MatchService/Leagueses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).Leagueses(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_LeaguesTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).LeaguesTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.MatchService/LeaguesTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).LeaguesTree(ctx, req.(*EmptyPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_Club_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).Club(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.MatchService/Club",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).Club(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_LeaguesClubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).LeaguesClubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.MatchService/LeaguesClubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).LeaguesClubs(ctx, req.(*InfoPost))
	}
	return interceptor(ctx, in, info, handler)
}

var _MatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "match.MatchService",
	HandlerType: (*MatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Leagueses",
			Handler:    _MatchService_Leagueses_Handler,
		},
		{
			MethodName: "LeaguesTree",
			Handler:    _MatchService_LeaguesTree_Handler,
		},
		{
			MethodName: "Club",
			Handler:    _MatchService_Club_Handler,
		},
		{
			MethodName: "LeaguesClubs",
			Handler:    _MatchService_LeaguesClubs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "match/match.proto",
}
